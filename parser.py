import json
import os
import sys
import time
    
from bot import read, write, answer_callback, writepic,write_location
import gui
from logger import Logger
from map_utils import get_location, get_search, get_detail
from weather import weather

class Parser:
    def __init__(self):
        self.running = True
        self.session_data_dir = "data"

        if not os.path.isdir(self.session_data_dir):
            try:
                os.mkdir(self.session_data_dir,0o755)
            except:
                Logger.log(Logger.ERROR,"Can not create dir %s. Quiting...",self.session_data_dir)
                exit(1)

    def session_id_from_message(self,message):
        """
        Get session id from a telegram message object (dict).

        message (dict): Telegram message object. (https://core.telegram.org/bots/api#message)

        return: session_id (str)
        """
        return str(message["chat"]["id"]) + "_" + str(message["message_id"])

    def save_session(self,session):
        """
        Save the session into file system

        session (dict): A dict representing the session
        """
        f_name = os.path.join(self.session_data_dir,session["id"])
        with open(f_name,"w") as f:
            json.dump(session,f,ensure_ascii=False)


    def load_session(self,session_id):
        """
        Load the session from file system

        session_id (str): Id of the session that is going to be loaded

        return: session (dict)
        """
        f_name = os.path.join(self.session_data_dir,session_id)
        if not os.path.isfile(f_name):
            raise FileNotFoundError("Can not find the session with the given session_id")

        with open(f_name,"r") as f:
            sess = json.load(f)

        return sess

    def start_session(self,data,location):
        """
        Start a new session based on given location for the given chat.

        data (dict): Data dict generated by read functions in bot.py

        location (dict): Dict containing two key "lat" (float), "long" (float) representing the sender's location
        """
        msg = gui.show_type_selection(data = data)
        msg_id = self.session_id_from_message(msg)

        sess = {
            "id": msg_id,
            "chat_id": msg["chat"]["id"],
            "message_id": msg["message_id"],
            "user": data["user"],
            "location": location
        }
        self.save_session(sess)

    def run(self):
        while True:
            try:
                data=read()

                if not self.running:
                    return

                if data == None or data["type"] == "error":
                    continue

                print(data)

                if data["type"] == "text":
                    if data["text"].startswith("/"):
                        write(data,"請直接輸入您所在的位置或是傳送手機的定位資訊\n我將會幫你搜尋附近的食物：")
                    else:
                        location=get_location(data["text"])
                        if location==None:
                            write(data,"抱歉，您所提供的地點資料不足")
                        else:
                            self.start_session(data,location)

                elif data["type"] == "location":
                    location = {
                        "lat": data["lat"],
                        "long": data["long"]
                    }
                    self.start_session(data,location)
                        
                elif data["type"] == "callback":
                    answer_callback(data)
                    try:
                        sess = self.load_session(self.session_id_from_message(data["message"]))
                    except FileNotFoundError:
                        write(data,"很抱歉，此按鈕已經失效。\n請直接輸入您所在的位置或是傳送手機的定位資訊\n我將會幫你搜尋附近的食物：")
                        continue

                    if data["data"][0:4] == "type":
                        #write(data=None,msg = "處理中...",keyboard = None,session = sess)
                        sess["place_type"] = ["bakery","cafe","restaurant","bar"][int(data["data"][4])]
                        sess["result_list"] = get_search(sess["location"]["lat"],sess["location"]["long"],sess["place_type"])
                        if sess["result_list"] is None:
                            write(data,"抱歉，無法找到符合條件的搜尋結果")
                            continue
                        else: 
                            gui.show_stores(sess)
                            self.save_session(sess)

                    elif data["data"]=="return_to_type":
                        gui.show_type_selection(session = sess)

                    elif data["data"]=="return_to_stores":
                        gui.show_stores(session = sess)

                    elif data["data"][:2] == "OK":
                        sid = int(data["data"][2])
                        if sid >= len(sess["result_list"]):
                            write(data,"很抱歉，此按鈕已經失效。\n請直接輸入您所在的位置或是傳送手機的定位資訊\n我將會幫你搜尋附近的食物：")
                            continue

                        store = sess["result_list"][sid]
                        gui.show_store_detail(sess,sid,with_keyboard=False)
                        write_location(data, store['name'],store['lat'], store['long'],store['add'])

                        write(data,"以下是現在的天氣狀況：")
                        location = {
                            "long": store["long"],
                            "lat":  store["lat"]
                        }
                        weather(data,location)
                        write(data,"祝你有個美好的用餐時光~")

                    elif data["data"][:5] == "store":
                        #write(data=None,msg = "處理中...",keyboard = None,session = sess)
                        sid = int(data["data"][5])
                        if sid >= len(sess["result_list"]):
                            write(data,"很抱歉，此按鈕已經失效。\n請直接輸入您所在的位置或是傳送手機的定位資訊\n我將會幫你搜尋附近的食物：")
                        else:
                            detail = get_detail(sess["result_list"][sid]["id"])
                            sess["result_list"][sid].update(detail)
                            gui.show_store_detail(sess,sid)
                            self.save_session(sess)
                    else:
                        write(data,"很抱歉，此按鈕已經失效。\n請直接輸入您所在的位置或是傳送手機的定位資訊\n我將會幫你搜尋附近的食物：")

                else:
                    write(data,"請直接輸入您所在的位置或是傳送手機的定位資訊\n我將會幫你搜尋附近的食物：")
            except:
                Logger.log(Logger.ERROR,"%s",str(sys.exc_info()))
        
    def stop(self):
        print("Stopping")
        self.running = False
